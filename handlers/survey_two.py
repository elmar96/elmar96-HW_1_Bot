from aiogram import types, Dispatcher
from config import bot
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton


async def survey_two_1(call: types.CallbackQuery):
    markup = InlineKeyboardMarkup()
    button_survey_call_3 = InlineKeyboardButton("–ó–∞–±–æ–ª–µ–ª",
                                                callback_data="button_survey_call_3")

    button_survey_call_4 = InlineKeyboardButton("–ú–∞—à–∏–Ω—É —Ä–∞–∑–±–∏–ª!",
                                                callback_data="button_survey_call_4")
    markup.add(button_survey_call_3, button_survey_call_4)
    await bot.send_message(call.message.chat.id, "–ü–æ—á–µ–º—É?", reply_markup=markup)


async def survey_two_2(call: types.CallbackQuery):
    markup = InlineKeyboardMarkup()
    button_survey_call_5 = InlineKeyboardButton("–û–†–í–ò",
                                                callback_data="button_survey_call_5")
    markup.add(button_survey_call_5)
    await bot.send_message(call.message.chat.id, "–ß–µ–º –∂–µ –≤—ã –±–æ–ª–µ–µ—Ç–µ?", reply_markup=markup)


async def survey_two_3(call: types.CallbackQuery):
    await bot.send_message(call.message.chat.id, "–ø—Ä–µ–¥–ª–æ–≥–∞—é –≤–∞–º —Ç—ë–ø–ª–æ–µ –æ–±–∏–ª—å–Ω–æ–µ –ø–∏—Ç—å—ë —Å –ª–∏–º–æ–Ω–æ–º –∏–ª–∏"
                                                 " —á–∞–π —Å –º–∞–ª–∏–Ω–æ–≤—ã–º –≤–∞—Ä–µ–Ω—å–µ–º,–ø–æ—Å–∫–æ—Ä–µ–µ –≤—ã–∑–¥–æ—Ä–∞–≤–ª–∏–≤–∞–π—Ç–µ!üë®‚Äç‚öïÔ∏è ")


async def survey_two_4(call: types.CallbackQuery):
    markup = InlineKeyboardMarkup()
    button_survey_call_6 = InlineKeyboardButton("–∫ —Å—á–∞—Å—Ç—å—é –Ω–µ—Ç",
                                                callback_data="button_survey_call_6")
    markup.add(button_survey_call_6)
    await bot.send_message(call.message.chat.id, "–≤—ã –Ω–µ –ø–æ—Å—Ç—Ä–∞–¥–∞–ª–∏?", reply_markup=markup)


async def survey_two_5(call: types.CallbackQuery):
    await bot.send_message(call.message.chat.id, "–±–µ—Ä–µ–≥–∏—Ç–µ —Å–µ–±—è –∂–µ–ª–µ–∑–∞ –Ω–∞–π–¥–µ—Ç—Å—è,–∂–∏–∑–Ω—å –æ–¥–Ω–∞!")


def register_handlers_client(dp: Dispatcher):
    dp.register_callback_query_handler(survey_two_1,
                                       lambda call: call.data == "button_survey_call_2")
    dp.register_callback_query_handler(survey_two_2,
                                       lambda call: call.data == "button_survey_call_3")
    dp.register_callback_query_handler(survey_two_3,
                                       lambda call: call.data == "button_survey_call_5")
    dp.register_callback_query_handler(survey_two_4,
                                       lambda call: call.data == "button_survey_call_4")
    dp.register_callback_query_handler(survey_two_5,
                                       lambda call: call.data == "button_survey_call_6")
